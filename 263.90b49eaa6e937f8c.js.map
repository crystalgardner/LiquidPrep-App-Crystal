{"version":3,"mappings":"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","names":["i0","ctx_r6","oxw","ctx_r10","routes","path","component","constructor","router","location","cropService","headerService","this","headerTitle","leftIconName","rightIconName","leftBtnClick","handleLeftClick","bind","rightBtnClick","Set","isAlreadyRendered","itemType","renderedHeadings","has","add","ngOnInit","updateHeader","headerConfig","requestingCrop","forkJoin","cropsListData","getCropListFromApi","myCrops","from","getLocalStorageMyCrops","subscribe","results","cropsList","filter","crop","some","myCrop","id","console","log","error","alert","backClicked","back","onHeaderClick","data","backToMyCrops","openSearch","toggleSearch","searchbar","nativeElement","focus","searchClose","searchText","addCrop","clickedCrop","navigateByUrl","then","r","filterFunction","i","cropName","includes","SelectCropComponent","selectors","ctx","SelectCropRoutingModule","RouterModule","Ng2SearchPipeModule","ɵfac","t","ɵmod","ɵngcc0","type","ɵinj","SelectCropModule","CommonModule","FlexLayoutModule","MaterialModule","FormsModule","MatProgressSpinnerModule"],"sources":["./src/app/components/select-crop/select-crop.component.html","./src/app/components/select-crop/select-crop-routing.module.ts","./src/app/components/select-crop/select-crop.component.ts","./node_modules/ng2-search-filter/ng2-search-filter.js","./src/app/components/select-crop/select-crop.module.ts"],"sourcesContent":["\n<mat-toolbar class=\"custom-toolbar\">\n  <button mat-icon-button class=\"blue-icon\" aria-label=\"LeftButton\" (click)=\"handleLeftClick()\">\n    <mat-icon>arrow_back</mat-icon>\n  </button>\n  <span class=\"toolbar-title\">Select a crop</span>\n  <span class=\"toolbar-spacer\"></span>\n  <button mat-icon-button class=\"blue-icon\" aria-label=\"RightButton\">\n    <mat-icon>volume_up</mat-icon>\n  </button>\n</mat-toolbar>\n\n\n<div *ngIf=\"requestingCrop\"\n     fxFlexFill fxLayout=\"column\"\n     fxLayoutGap=\"25px\"\n     fxLayoutAlign=\"center center\">\n  <div>\n    <mat-spinner diameter=\"100\" color=\"primary\"></mat-spinner>\n  </div>\n  <p>Loading...</p>\n</div>\n\n<div *ngIf=\"!requestingCrop\" class=\"add-crop\" style=\"overflow-x:hidden;\" fxFlexFill cdkScrollable>\n\n  <mat-toolbar class=\"search-block mat-elevation-z4\" [class.active]=\"toggleSearch\">\n    <mat-toolbar-row style=\"padding: 0 5px;\">\n      <button class=\"search-icon\" mat-icon-button disabled>\n        <mat-icon>search</mat-icon>\n      </button>\n      <input class=\"search-control\" type=\"text\" placeholder=\"Search\" [(ngModel)]=\"searchText\">\n      <button mat-button mat-icon-button (click)=\"searchClose()\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </mat-toolbar-row>\n  </mat-toolbar>\n\n  <div *ngIf=cropsList class=\"cropsList\">\n    <mat-grid-list class=\"grid\" cols=\"2\" rowHeight=\"229\" gutterSize=\"2px\">\n      <mat-grid-tile *ngFor=\"let crop of filterFunction()\">\n        <mat-card (click)=\"addCrop(crop)\">\n          <img mat-card-image class=\"cardImage\" src=\"{{ crop.url }}\" alt=\"{{ crop.cropName }}\" />\n          <mat-card-footer>\n            <mat-card-title class=\"cardTittle\">{{ crop.cropName }}</mat-card-title>\n          </mat-card-footer>\n        </mat-card>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </div>\n  <div *ngIf=\"!cropsList || cropsList.length === 0 \">\n      <mat-card>\n        <img mat-card-image class=\"cardImage\" src=\"{{ NO_NEW_CROPS }}\" />\n      </mat-card>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SelectCropComponent } from './select-crop.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SelectCropComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SelectCropRoutingModule { }\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { Router} from '@angular/router';\nimport { Location } from '@angular/common';\nimport { Crop } from '../../models/Crop';\nimport { CropDataService } from '../../service/CropDataService';\nimport { HeaderService } from 'src/app/service/header.service';\nimport { HeaderConfig } from 'src/app/models/HeaderConfig.interface';\nimport { forkJoin, from } from 'rxjs';\n\n@Component({\n  selector: 'app-select-crop',\n  templateUrl: './select-crop.component.html',\n  styleUrls: ['./select-crop.component.scss']\n})\n\nexport class SelectCropComponent implements OnInit{\n\n  searchText = '';\n  headerConfig: HeaderConfig = {\n    headerTitle: 'Add a new crop',\n    leftIconName: 'close',\n    rightIconName: 'search',\n    leftBtnClick: this.handleLeftClick.bind(this),\n    rightBtnClick: null,\n  };\n\n  @ViewChild('searchbar') searchbar: ElementRef;\n\n  toggleSearch = false;\n  cropsList: Crop[];\n  NO_NEW_CROPS = '../../assets/crops-images/noNewCrops.PNG';\n  public requestingCrop = true;\n  private renderedHeadings: Set<string> = new Set<string>();\n\n  isAlreadyRendered(itemType: string): boolean {\n    if (this.renderedHeadings.has(itemType)) {\n      return true;\n    } else {\n      this.renderedHeadings.add(itemType);\n      return false;\n    }\n  }\n\n  constructor(private router: Router, private location: Location,\n              private cropService: CropDataService,\n              private headerService: HeaderService) { }\n\n  ngOnInit(): void {\n    this.headerService.updateHeader(this.headerConfig);\n\n    this.requestingCrop = true;\n\n    forkJoin({\n      cropsListData: this.cropService.getCropListFromApi(),\n      myCrops: from(this.cropService.getLocalStorageMyCrops())\n    }).subscribe(\n      (results) => {\n        const cropsListData = results.cropsListData;\n        const myCrops = results.myCrops;\n\n        this.cropsList = cropsListData.filter((crop) => {\n          return !myCrops.some((myCrop) => myCrop.id === crop.id);\n        });\n\n        console.log('select cropsList:', this.cropsList);\n        this.requestingCrop = false;\n      },\n      (error) => {\n        alert('Could not get crop list: ' + error);\n        this.requestingCrop = false;\n      }\n    );\n  }\n\n  public backClicked() {\n    this.location.back();\n  }\n\n  public onHeaderClick(data:string){\n    if(data == 'leftBtn'){\n      this.backClicked();\n    }else {\n      //TODO\n    }\n  }\n\n  public handleLeftClick(){\n    this.backToMyCrops();\n  }\n\n  backToMyCrops(){\n    this.location.back();\n  }\n\n  openSearch() {\n    this.toggleSearch = true;\n    this.searchbar.nativeElement.focus();\n  }\n  searchClose() {\n    this.searchText = '';\n    this.toggleSearch = false;\n  }\n\n  addCrop(clickedCrop: Crop) {\n    this.router.navigateByUrl('/seed-date/' + clickedCrop.id).then(r => {});\n  }\n\n  filterFunction(): Crop[]{\n    if (this.searchText === null || this.searchText === ''){\n      return this.cropsList;\n    }else{\n      return this.cropsList.filter(i => i.cropName.includes( this.searchText));\n    }\n  }\n}\n","import { Injectable, NgModule, Pipe } from '@angular/core';\n\nimport * as ɵngcc0 from '@angular/core';\nclass Ng2SearchPipe {\n    /**\n     * @param {?} items object from array\n     * @param {?} term term's search\n     * @return {?}\n     */\n    transform(items, term) {\n        if (!term || !items)\n            return items;\n        return Ng2SearchPipe.filter(items, term);\n    }\n    /**\n     *\n     * @param {?} items List of items to filter\n     * @param {?} term  a string term to compare with every property of the list\n     *\n     * @return {?}\n     */\n    static filter(items, term) {\n        const /** @type {?} */ toCompare = term.toLowerCase();\n        /**\n         * @param {?} item\n         * @param {?} term\n         * @return {?}\n         */\n        function checkInside(item, term) {\n            for (let /** @type {?} */ property in item) {\n                if (item[property] === null || item[property] == undefined) {\n                    continue;\n                }\n                if (typeof item[property] === 'object') {\n                    if (checkInside(item[property], term)) {\n                        return true;\n                    }\n                }\n                if (item[property].toString().toLowerCase().includes(toCompare)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return items.filter(function (item) {\n            return checkInside(item, term);\n        });\n    }\n}\nNg2SearchPipe.ɵfac = function Ng2SearchPipe_Factory(t) { return new (t || Ng2SearchPipe)(); };\nNg2SearchPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"filter\", type: Ng2SearchPipe, pure: false });\nNg2SearchPipe.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng2SearchPipe, factory: Ng2SearchPipe.ɵfac });\n/**\n * @nocollapse\n */\nNg2SearchPipe.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng2SearchPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'filter',\n                pure: false\n            }]\n    }, {\n        type: Injectable\n    }], null, null); })();\n\nclass Ng2SearchPipeModule {\n}\nNg2SearchPipeModule.ɵfac = function Ng2SearchPipeModule_Factory(t) { return new (t || Ng2SearchPipeModule)(); };\nNg2SearchPipeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: Ng2SearchPipeModule });\nNg2SearchPipeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n/**\n * @nocollapse\n */\nNg2SearchPipeModule.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng2SearchPipeModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [Ng2SearchPipe],\n                exports: [Ng2SearchPipe]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2SearchPipeModule, { declarations: [Ng2SearchPipe], exports: [Ng2SearchPipe] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Ng2SearchPipeModule, Ng2SearchPipe };\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { SelectCropRoutingModule } from './select-crop-routing.module';\nimport { SelectCropComponent } from './select-crop.component';\nimport { MaterialModule } from '../../material/material.module';\nimport { FormsModule } from '@angular/forms';\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\n\n\n@NgModule({\n  declarations: [SelectCropComponent],\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        SelectCropRoutingModule,\n        MaterialModule,\n        FormsModule,\n        Ng2SearchPipeModule,\n        MatProgressSpinnerModule\n    ]\n})\nexport class SelectCropModule { }\n"],"sourceRoot":"webpack:///","file":"263.90b49eaa6e937f8c.js"}